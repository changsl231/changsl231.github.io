<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留白</title>
  
  <subtitle>留白的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://changsl231.xyz/"/>
  <updated>2020-12-16T09:22:26.949Z</updated>
  <id>http://changsl231.xyz/</id>
  
  <author>
    <name>changsl231</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【李宏毅2020机器学习】lesson1：Introduction</title>
    <link href="http://changsl231.xyz/2020/12/15/%E3%80%90%E6%9D%8E%E5%AE%8F%E6%AF%852020%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E3%80%91lesson1%EF%BC%9AIntroduction/"/>
    <id>http://changsl231.xyz/2020/12/15/%E3%80%90%E6%9D%8E%E5%AE%8F%E6%AF%852020%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E3%80%91lesson1%EF%BC%9AIntroduction/</id>
    <published>2020-12-15T12:08:45.945Z</published>
    <updated>2020-12-16T09:22:26.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lesson1：Introduction"><a href="#lesson1：Introduction" class="headerlink" title="lesson1：Introduction"></a>lesson1：Introduction</h1><p>2020课程地址：<a href="http://speech.ee.ntu.edu.tw/~tlkagk/courses_ML20.html" target="_blank" rel="noopener">Hung-yi Lee</a></p><a id="more"></a><h2 id="1-机器学习就是自动找函式"><a href="#1-机器学习就是自动找函式" class="headerlink" title="1. 机器学习就是自动找函式"></a>1. 机器学习就是自动找函式</h2><p>机器学习就是根据自己的需要，来找出一个抽象的<em><code>f(x)</code></em>函数，<code>x</code>为你对计算机输入的信息，<code>f(x)</code>为计算机根据输入<code>x</code>得到的输出，例如：</p><ul><li><p>语音识别（Speech Recognition）</p><p>输入一段语音翻译成文字</p></li><li><p>图像识别（Image Recognition)</p><p>输入一张图像，让计算机来识别这张图像的类别</p></li><li><p>下围棋 （Playing GO)</p><p>输入当前的棋谱，然后计算机计算出下一步应该走哪一步‘</p></li><li><p>对话系统（Dialogue System）</p><p>根据语境，你说一句话，机器回答一句话，完成两者之间的交流</p></li></ul><h2 id="2-你想找什么的函式"><a href="#2-你想找什么的函式" class="headerlink" title="2.你想找什么的函式"></a>2.你想找什么的函式</h2><p>根据任务的不同，<code>f(x)</code>也有着不同的类别，例如：</p><ul><li><p>回归（Regrssion） </p><p>输出一个数值（scalar）</p></li><li><p>分类（Classification）</p><p>二分类（Binary Classification）：True or False</p><p>多分类（Multi-class Classification）:A,B,C,D,…</p></li><li><p>生成（Generation）</p><p>产生结构性的复杂事物，例如翻译、画图等</p></li></ul><h2 id="3-如何告诉机器"><a href="#3-如何告诉机器" class="headerlink" title="3.如何告诉机器"></a>3.如何告诉机器</h2><ul><li><p>监督学习（Supervised Learning）</p><p>手动标记<code>label</code>供计算机学习，然后函式根据输出和label计算loss，接下来机器找出loss最低的的函式</p></li><li><p>强化学习（Reinforcement Learing）</p><p>Alpha GO</p></li><li><p>无监督学习（Unsupervised Learing）</p><p>GAN,Auto-encoder</p></li></ul><h2 id="4-机器学习如何找出函式"><a href="#4-机器学习如何找出函式" class="headerlink" title="4.机器学习如何找出函式"></a>4.机器学习如何找出函式</h2><p>计算机通过梯度下降（Gradient Desent）找出loss最低的函式</p><h2 id="5-前沿研究"><a href="#5-前沿研究" class="headerlink" title="5.前沿研究"></a>5.前沿研究</h2><ul><li><p>可解释AI (Explainable AI)</p><p>让深度学习不再是“黑盒”，直观展示为什么深度学习会识别图像，会生成语音翻译</p></li><li><p>对抗攻击（Advesarial Attack）</p><p>让计算机模型有更好的稳定性，能够自动甄别出输入的噪声</p></li><li><p>网络压缩（Network Compression）</p><p>在实际中我们生成的模型可能需要占用比较大的储存资源、计算资源，通过对模型的压缩让模型变得比较小，可以利用较少的资源达到同样的识别效果。</p></li><li><p>异常检测（Anomaly Detection）</p><p>让模型知道自己不知道</p></li><li><p>迁移学习（Transformer Learning）<br>让模型能够很快适用于不同的任务</p></li><li><p>Meta Learning</p><p>Learn to Learn 让计算机学习如何学习，举一反三</p></li><li><p>Life-Long Learning  </p><p>勤奋不懈却天资不佳，让计算机终身学习，不断地丰富自己</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lesson1：Introduction&quot;&gt;&lt;a href=&quot;#lesson1：Introduction&quot; class=&quot;headerlink&quot; title=&quot;lesson1：Introduction&quot;&gt;&lt;/a&gt;lesson1：Introduction&lt;/h1&gt;&lt;p&gt;2020课程地址：&lt;a href=&quot;http://speech.ee.ntu.edu.tw/~tlkagk/courses_ML20.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hung-yi Lee&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="deeplearning" scheme="http://changsl231.xyz/categories/deeplearning/"/>
    
    
      <category term="deeplearning" scheme="http://changsl231.xyz/tags/deeplearning/"/>
    
  </entry>
  
  <entry>
    <title>【OpenCV4快速入门视频30讲】lesson2：图像色彩空间转换</title>
    <link href="http://changsl231.xyz/2020/12/15/%E3%80%90OpenCV4%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E8%A7%86%E9%A2%9130%E8%AE%B2%E3%80%91lesson2%EF%BC%9A%E5%9B%BE%E5%83%8F%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4%E8%BD%AC%E6%8D%A2/"/>
    <id>http://changsl231.xyz/2020/12/15/%E3%80%90OpenCV4%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E8%A7%86%E9%A2%9130%E8%AE%B2%E3%80%91lesson2%EF%BC%9A%E5%9B%BE%E5%83%8F%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4%E8%BD%AC%E6%8D%A2/</id>
    <published>2020-12-15T08:58:07.236Z</published>
    <updated>2020-12-15T09:43:33.790Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lesson2：图像色彩空间转换"><a href="#lesson2：图像色彩空间转换" class="headerlink" title="lesson2：图像色彩空间转换"></a>lesson2：图像色彩空间转换</h1><h2 id="1-知识点"><a href="#1-知识点" class="headerlink" title="1.知识点"></a>1.知识点</h2><p>使用<code>cvcolor</code>对图像色彩空间进行转换，<code>imwrite</code>保存图像</p><a id="more"></a><ul><li><p>读取图像</p></li><li><p>色彩空间转换函数 cvColor</p><blockquote><p>COLOR_BGR2GRAY = 6 彩色到灰度</p><p>COLOR_GRAY2BGR = 8 灰度到彩色</p><p>COLOR_BGR2HSV = 40 BGR到HSV</p><p>COLOR_HSV2BGR = 54 HSV到BGR </p></blockquote></li><li><p>图像保存-imwrite</p><blockquote><p>第一个参数是图像保存路径</p><p>第二个参数是图像内存对象</p></blockquote><p>这样做的好处是改变图像亮度、饱和度的时候比较方便，处理完成后再返回到RGB图像通道。</p></li></ul><h2 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h2><p>quickopencv.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个QuickDemo类</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickDemo</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorSpace_Demo</span><span class="params">(Mat &amp;<span class="built_in">image</span>)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>quickdemo.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">名称：OpenCV4快速入门视频30讲 002- 图像色彩转换</span></span><br><span class="line"><span class="comment">时间：2020/12/14</span></span><br><span class="line"><span class="comment">作者：changsl</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"quickopencv.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickDemo::colorSpace_Demo</span><span class="params">(Mat &amp;<span class="built_in">image</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Mat gray,hsv;</span><br><span class="line">cvtColor(<span class="built_in">image</span>,hsv,COLOR_BGR2HSV); <span class="comment">//转换为HSV</span></span><br><span class="line"><span class="comment">// H 1~180,S:0-255饱和度，V:0-255亮度</span></span><br><span class="line">cvtColor(<span class="built_in">image</span>,gray,COLOR_BGR2GRAY); <span class="comment">//转换为灰度</span></span><br><span class="line">imshow(<span class="string">"hsv"</span>,hsv); <span class="comment">//显示图像</span></span><br><span class="line">imshow(<span class="string">"gray"</span>, gray); <span class="comment">//显示图像</span></span><br><span class="line">imwrite(<span class="string">"D:/hsv.png"</span>, hsv); <span class="comment">//保存图像</span></span><br><span class="line">imwrite(<span class="string">"D:/gray.png"</span>, gray); <span class="comment">//保存图像啊</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>day02.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">名称：OpenCV4快速入门视频30讲 002- 图像空间转换</span></span><br><span class="line"><span class="comment">时间：2020/12/15</span></span><br><span class="line"><span class="comment">作者：changsl</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"quickopencv.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Mat src = imread(<span class="string">"C:/Users/csl/Desktop/lena.jpg"</span>);</span><br><span class="line"><span class="keyword">if</span> (src.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"There is not image..\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">namedWindow(<span class="string">"输入窗口"</span>, WINDOW_FREERATIO);</span><br><span class="line">imshow(<span class="string">"输入窗口"</span>, src);</span><br><span class="line">QuickDemo qd;</span><br><span class="line">qd.colorSpace_Demo(src);</span><br><span class="line">waitKey(<span class="number">0</span>);</span><br><span class="line">destroyAllWindows();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-结果展示"><a href="#3-结果展示" class="headerlink" title="3.结果展示"></a>3.结果展示</h2><p><img src="https://changsl231-pics.oss-cn-beijing.aliyuncs.com/img/20201215171922.png" alt="image-20201215171922182"></p><center><font size=3>结果展示</font></center><p><img src="https://changsl231-pics.oss-cn-beijing.aliyuncs.com/img/20201215172226.png" alt="image-20201215172226603"></p><center><font size=3>保存结果</font></center>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lesson2：图像色彩空间转换&quot;&gt;&lt;a href=&quot;#lesson2：图像色彩空间转换&quot; class=&quot;headerlink&quot; title=&quot;lesson2：图像色彩空间转换&quot;&gt;&lt;/a&gt;lesson2：图像色彩空间转换&lt;/h1&gt;&lt;h2 id=&quot;1-知识点&quot;&gt;&lt;a href=&quot;#1-知识点&quot; class=&quot;headerlink&quot; title=&quot;1.知识点&quot;&gt;&lt;/a&gt;1.知识点&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;cvcolor&lt;/code&gt;对图像色彩空间进行转换，&lt;code&gt;imwrite&lt;/code&gt;保存图像&lt;/p&gt;
    
    </summary>
    
    
      <category term="CV" scheme="http://changsl231.xyz/categories/CV/"/>
    
    
      <category term="OpenCV" scheme="http://changsl231.xyz/tags/OpenCV/"/>
    
      <category term="C++" scheme="http://changsl231.xyz/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>【OpenCV4快速入门视频30讲】lesson1：图像读取与显示</title>
    <link href="http://changsl231.xyz/2020/12/15/%E3%80%90OpenCV4%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E8%A7%86%E9%A2%9130%E8%AE%B2%E3%80%91lesson1%EF%BC%9A%E5%9B%BE%E5%83%8F%E8%AF%BB%E5%8F%96%E4%B8%8E%E6%98%BE%E7%A4%BA/"/>
    <id>http://changsl231.xyz/2020/12/15/%E3%80%90OpenCV4%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E8%A7%86%E9%A2%9130%E8%AE%B2%E3%80%91lesson1%EF%BC%9A%E5%9B%BE%E5%83%8F%E8%AF%BB%E5%8F%96%E4%B8%8E%E6%98%BE%E7%A4%BA/</id>
    <published>2020-12-15T08:53:47.000Z</published>
    <updated>2020-12-16T09:22:08.311Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lesson1：图像读取与显示"><a href="#lesson1：图像读取与显示" class="headerlink" title="lesson1：图像读取与显示"></a>lesson1：图像读取与显示</h1><h2 id="1-课程目标"><a href="#1-课程目标" class="headerlink" title="1. 课程目标"></a>1. 课程目标</h2><p>学习使用OpenCV的<code>imread</code>、<code>namewindow</code>和<code>imshow</code>函数实现图像的读取与显示</p><a id="more"></a><h2 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">名称：OpenCV4快速入门视频30讲 001- 图像读取与显示</span></span><br><span class="line"><span class="comment">时间：2020/12/3</span></span><br><span class="line"><span class="comment">作者：changsl</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Mat src = imread(<span class="string">"C:/Users/csl/Desktop/lena.jpg"</span>); <span class="comment">//BGR 0-255</span></span><br><span class="line"><span class="keyword">if</span> (src.empty()) <span class="comment">//判断是否读取到数据</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"There is not image..\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">namedWindow(<span class="string">"输入窗口"</span>, WINDOW_AUTOSIZE); <span class="comment">//参数1：窗体名称；参数2：窗体的属性</span></span><br><span class="line">imshow(<span class="string">"输入窗口"</span>,src); <span class="comment">//显示图像</span></span><br><span class="line">waitKey(<span class="number">0</span>);</span><br><span class="line">destroyAllWindows();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-结果展示"><a href="#3-结果展示" class="headerlink" title="3.结果展示"></a>3.结果展示</h2><p><img src="https://changsl231-pics.oss-cn-beijing.aliyuncs.com/img/20201216172143.png" alt="lena"></p><center><font size = 3>结果展示</font></center>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lesson1：图像读取与显示&quot;&gt;&lt;a href=&quot;#lesson1：图像读取与显示&quot; class=&quot;headerlink&quot; title=&quot;lesson1：图像读取与显示&quot;&gt;&lt;/a&gt;lesson1：图像读取与显示&lt;/h1&gt;&lt;h2 id=&quot;1-课程目标&quot;&gt;&lt;a href=&quot;#1-课程目标&quot; class=&quot;headerlink&quot; title=&quot;1. 课程目标&quot;&gt;&lt;/a&gt;1. 课程目标&lt;/h2&gt;&lt;p&gt;学习使用OpenCV的&lt;code&gt;imread&lt;/code&gt;、&lt;code&gt;namewindow&lt;/code&gt;和&lt;code&gt;imshow&lt;/code&gt;函数实现图像的读取与显示&lt;/p&gt;
    
    </summary>
    
    
      <category term="CV" scheme="http://changsl231.xyz/categories/CV/"/>
    
    
      <category term="OpenCV" scheme="http://changsl231.xyz/tags/OpenCV/"/>
    
      <category term="C++" scheme="http://changsl231.xyz/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>markdown学习笔记</title>
    <link href="http://changsl231.xyz/2020/12/14/markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://changsl231.xyz/2020/12/14/markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-12-14T09:32:29.000Z</published>
    <updated>2020-12-14T09:32:29.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="markdown学习笔记"><a href="#markdown学习笔记" class="headerlink" title="markdown学习笔记"></a>markdown学习笔记</h1><h2 id="1-设置标题"><a href="#1-设置标题" class="headerlink" title="1.设置标题"></a>1.设置标题</h2><p>markdown可以通过 <code>#</code> 来设置不同的标题</p><a id="more"></a><p>例如： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://changsl231-pics.oss-cn-beijing.aliyuncs.com/img/20201214170915.png#pic_center" alt="标题示意图"></p><h2 id="2-插入图像"><a href="#2-插入图像" class="headerlink" title="2.插入图像"></a>2.插入图像</h2><h3 id="2-1-插入图像"><a href="#2-1-插入图像" class="headerlink" title="2.1 插入图像"></a>2.1 插入图像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![图片名称](图像的地址#pic_center)</span><br><span class="line">例如：</span><br><span class="line">![图像展示](C:\Users\csl\Desktop\图像展示.png#piccenter)</span><br><span class="line">其中，&#96;pic_center&#96;的作用是让图片居中</span><br></pre></td></tr></table></figure><h2 id="2-2-设置图像名称"><a href="#2-2-设置图像名称" class="headerlink" title="2.2 设置图像名称"></a>2.2 设置图像名称</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">3</span>&gt;</span>图像展示<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">// center：设置文字对齐方式</span><br><span class="line">// font size：设置文字大小</span><br></pre></td></tr></table></figure><p>显示效果如下所示：<br><img src="https://changsl231-pics.oss-cn-beijing.aliyuncs.com/img/20201214172830.png#pic_center" alt="image-20201214172830146"></p><center><font size = 3>图像展示</font></center>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;markdown学习笔记&quot;&gt;&lt;a href=&quot;#markdown学习笔记&quot; class=&quot;headerlink&quot; title=&quot;markdown学习笔记&quot;&gt;&lt;/a&gt;markdown学习笔记&lt;/h1&gt;&lt;h2 id=&quot;1-设置标题&quot;&gt;&lt;a href=&quot;#1-设置标题&quot; class=&quot;headerlink&quot; title=&quot;1.设置标题&quot;&gt;&lt;/a&gt;1.设置标题&lt;/h2&gt;&lt;p&gt;markdown可以通过 &lt;code&gt;#&lt;/code&gt; 来设置不同的标题&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Pytorch学习第一周</title>
    <link href="http://changsl231.xyz/2020/11/05/Pytorch%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%91%A8/"/>
    <id>http://changsl231.xyz/2020/11/05/Pytorch%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%91%A8/</id>
    <published>2020-11-05T06:37:18.000Z</published>
    <updated>2020-12-15T08:59:53.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pytorch学习第一周"><a href="#Pytorch学习第一周" class="headerlink" title="Pytorch学习第一周"></a>Pytorch学习第一周</h1><a id="more"></a><h2 id="1-张量简介与创建"><a href="#1-张量简介与创建" class="headerlink" title="1.张量简介与创建"></a>1.张量简介与创建</h2><h3 id="1-1Tensor概念"><a href="#1-1Tensor概念" class="headerlink" title="1.1Tensor概念"></a>1.1Tensor概念</h3><ol><li>张量是什么？<blockquote><p>张量是一个<strong>多维数组</strong>，他是向量标量矩阵的高维扩展。</p></blockquote></li><li>Tensor 与Variable之间的关系？<blockquote><p>Variable（0.4版本之前）是torch.autograd中的数据类型，主要用于封装Tensor,进行自动求导</p></blockquote></li><li>Tensor的属性：<blockquote><ul><li>data：张量的数值</li><li>dtype:张量的数据类型</li><li>shape:张量的形状</li><li>device:张量所在的设备，GPU/CPU</li><li>requires_grad:是不是需要求导</li><li>grad:张量的导数</li><li>grad_fn: 张量的计算公式</li><li>is_leaf:是不是叶子节点，在计算图的时候会用到</li></ul></blockquote></li></ol><h3 id="1-2-张量的创建"><a href="#1-2-张量的创建" class="headerlink" title="1.2 张量的创建"></a>1.2 张量的创建</h3><ol><li>直接创建</li></ol><ul><li>torch.tensor()<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr = np.ones((<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">t = torch.tensor(arr,device=<span class="string">'cuda'</span>)</span><br><span class="line">print(t)</span><br></pre></td></tr></table></figure></li><li>torch.from_numpy(ndarray)</li></ul><p><strong>注意:</strong> tensor和ndarray共享内存，一个改变另一个也会改变 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">t = torch.from_numpy(arr)</span><br><span class="line">print(<span class="string">'修改tensor：'</span>)</span><br><span class="line">t[<span class="number">0</span>,<span class="number">0</span>]=<span class="number">10</span></span><br><span class="line">print(<span class="string">'numpy:'</span>,arr)</span><br><span class="line">print(<span class="string">'tensor:'</span>,t)</span><br></pre></td></tr></table></figure><ol start="2"><li>依据数值创建</li></ol><ul><li>torch.zeros()<br>功能：依据size创建全0张量</li></ul><p><strong>注意</strong>：out参数用来存放torch.zeros()生成的张量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">out_t = torch.tensor([<span class="number">1</span>])</span><br><span class="line">t = torch.zeros((<span class="number">3</span>,<span class="number">3</span>),out=out_t)</span><br><span class="line">print(t,<span class="string">'\n'</span>,out_t)</span><br><span class="line">print(id(t),id(out_t),id(t)==id(out_t))</span><br></pre></td></tr></table></figure><ul><li>torch.zeros_like()<br>功能：依据形状创建全零张量</li><li>torch.ones()</li><li>torch.ones_like()</li><li>torch.full()</li><li>torch.full_like()</li><li>torch.arrange()<br>功能：创建等差数列的张量</li></ul><p><strong>注意</strong>：是半开区间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t = torch.arrange(<span class="number">2</span>,<span class="number">10</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>torch.linspace()<br>功能：创建一个等差数列<br>注意：是闭合的区间<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t = torch.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure></li><li>torch.logspace()<br>功能：依对数创建张量，base:是指底数</li><li>torch.eye()<br>功能：创建对角矩阵，默认为方阵</li></ul><ol start="3"><li>依据概率分布创建张量</li></ol><ul><li>torch.normal()<br>功能：生成正态分布（高斯分布），mean：均值；std：标注差<br>四种模式：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mean为标量，std为标量</span></span><br><span class="line">t_normal = torch.normal(<span class="number">0</span>,<span class="number">1</span>,size(<span class="number">4</span>,))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mean为标量，std为张量</span></span><br><span class="line">std = torch.arrange(<span class="number">1</span>,<span class="number">5</span>,dtype=torch.float)</span><br><span class="line">t_normal = torch.normal(<span class="number">1</span>,std)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mean为张量，std为标量</span></span><br><span class="line">mean = torch.arrange(<span class="number">1</span>,<span class="number">5</span>,dtype=torch.float)</span><br><span class="line">t_normal = torch.normal(mean,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mean为张量，std为张量</span></span><br><span class="line">mean = torch.arrange(<span class="number">1</span>,<span class="number">5</span>,dtype=torch.float)</span><br><span class="line">std = torch.arrange(<span class="number">1</span>,<span class="number">5</span>,dtype=torch.float)</span><br><span class="line">t_normal = torch.normal(mean,std)</span><br></pre></td></tr></table></figure></li><li>torch.randn()<br>功能：创建均值为0，标准差为1的正态分布</li><li>torch.randn_like()</li><li>torch.rand()<br>功能：创建均匀分布的张量</li><li>torch.rand_like()<br>功能：在区间[0,1)上，生成均匀分布</li><li>torch.randint()</li><li>torch.randint_like()<br>功能：区间[low,high)生成整数均与分布</li><li>torch.randperm()<br>功能：生成从0到n-1的随机排列</li><li>torch.bernoulli()<br>功能：以input为概率，生成伯努利分布（0-1分布，两点分布）<h2 id="2-张量操作与线性回归"><a href="#2-张量操作与线性回归" class="headerlink" title="2. 张量操作与线性回归"></a>2. 张量操作与线性回归</h2><h3 id="2-1-张量的操作：拼接、切分、索引和变换"><a href="#2-1-张量的操作：拼接、切分、索引和变换" class="headerlink" title="2.1 张量的操作：拼接、切分、索引和变换"></a>2.1 张量的操作：拼接、切分、索引和变换</h3></li></ul><ol><li>张量拼接与切分</li></ol><ul><li>torch.cat()<br>功能:将张量按维度dim进行拼接<blockquote><p>torch.cat(tensors,dim=0,out=None)</p><ul><li>tensors: 张量序列</li><li>dim:要拼接的维度</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = torch.ones((<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">t_0 = torch.cat([t,t],dim=<span class="number">0</span>)</span><br><span class="line">t_1 = torch.cat([t,t]dim=<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li>torch.stack()<br>功能：在新创建的维度dim上进行拼接<blockquote><p>tensor.stack(tensors,dim=0,out=None)</p><ul><li>tensors:张量序列</li><li>dim:要拼接的维度</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = torch.ones((<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">t_stack = torch.stack([t,t],dim=<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li><li>torch.chunk()<br>功能：将张量按维度dim进行平均切分<br>返回值：张量列表<br>注意事项：若不能整除，最后一份张量小于其他张量<blockquote><p>torch.chunk(input,chunks,dim=0)</p><ul><li>inputs:要切分的张量</li><li>chunks:要切分的份数</li><li>dim:要切分的维度</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = torch.ones((<span class="number">2</span>,<span class="number">5</span>))</span><br><span class="line">list_of_tensors = torch.chunk(a,chunks=<span class="number">3</span>,dim=<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li>torch.split()<br>功能：将张量按维度dim进行切分<br>返回值：张量列表<blockquote><p>torch.split(tensor,split_size_or_sections,dim=0)</p><ul><li>tensor:要切分的张量</li><li>split_size_or_sections:为int时，表示每一份的长度；为list时，按list元素切分</li><li>dim:要切分的维度</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = torch.ones((<span class="number">2</span>,<span class="number">5</span>))</span><br><span class="line">list_of_tensors_1 = torch.split(a,<span class="number">3</span>,dim=<span class="number">1</span>)</span><br><span class="line">list_of_tensors_2 = torch.split(a,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>],dim=<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>张量的索引</li></ol><ul><li><p>torch.index_select()<br>功能：在维度dim上，按index索引数据<br>返回值：依据index索引数据拼接的张量</p><blockquote><ul><li>input: 要索引的张量</li><li>dim:要索引的维度</li><li>index:要索引的序列号</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = torch.randint(<span class="number">0</span>,<span class="number">9</span>,size=(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">idx =torch.tensor([<span class="number">0</span>,<span class="number">2</span>],dtype=torch.long)</span><br><span class="line">t_select = torch.index_select(t,dim=<span class="number">0</span>,index=idx)</span><br></pre></td></tr></table></figure></li><li><p>torch.masked_select()<br>功能：按mask中的True进行索引<br>返回值：一维张量</p><blockquote><p>torch.masked_select(input,mask,out=None)</p><ul><li>input:要索引的张量</li><li>mask:与input同形状的不二类型张量</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = torch.randint(<span class="number">0</span>,<span class="number">9</span>,size=(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">mask = t.ge(<span class="number">5</span>) <span class="comment"># ge是大于等于的意思</span></span><br><span class="line">t_select = torch.masked_select(t,mask)</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>张量变换</li></ol><ul><li><p>torch.reshape()<br>功能：变换张量形状<br>注意事项：当张量在内存中是连续时，新张量与input共享数据存储内存</p><blockquote><p>torch.reshape(input,shape)</p><ul><li>input:要变换的张量</li><li>shape：新张量的形状</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = torch.randperm(<span class="number">8</span>)</span><br><span class="line">t_reshape = torch.reshape(t,(<span class="number">-1</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure></li><li><p>torch.transpose()<br>功能：交换张量的两个维度</p><blockquote><p>torch.transpose(input,dim0,dim1)</p><ul><li>input:要交换的张量</li><li>dim0:要交换的维度</li><li>dim1:要交换的维度</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = torch.rand((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">t_transpose = torch.transpose(t,dim0=<span class="number">1</span>,dim1=<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li><li><p>torch.t()<br>功能：2维张量转置，对矩阵而言，等价于torch.transpose(input,0,1)</p></li><li><p>torch.squeeze()<br>功能：压缩常速为1的维度（轴）</p><blockquote><p>torch.squeeze(input,dim=None,out=None)</p><ul><li>dim:若为None，移除所有长度为1的轴；若指定维度，当且仅当该轴长度为1时，可以被移除</li></ul></blockquote></li><li><p>torch.unsqueeze()<br>功能：依据dim扩展维度</p><blockquote><p>torch.unsequeeze(input,dim,out=None)<br>dim:扩展的维度</p></blockquote></li></ul><h3 id="2-2-张量的数学运算"><a href="#2-2-张量的数学运算" class="headerlink" title="2.2 张量的数学运算"></a>2.2 张量的数学运算</h3><ol><li>加减乘除<blockquote><ul><li>torch.add(input,alpha=1,other,out=None)<br>功能：逐原素计算input+alpha * other</li><li>torch.addcdiv()</li><li>torch.sub()</li><li>torch.div()</li><li>torch.mul()</li></ul></blockquote></li><li>对数，指数，幂函数<blockquote><ul><li>torch.log(input,out =None)</li><li>torch.log10(input,out=None)</li><li>torch.log2(input,out=None)</li><li>torch.exp(input,out=None)</li><li>torch,pow()</li></ul></blockquote></li><li>三角函数<blockquote><ul><li>torch.abs(input,out=None)</li><li>torch.acos(input,out=None)</li><li>torch.cosh(input,out=None)</li><li>torch.cos(input,out=None)</li><li>torch.asin(input,out=None)</li><li>torch.atan(input,out=None)</li><li>torch.atan2(input,other,out=None)</li></ul></blockquote></li></ol><h3 id="2-3-线性回归"><a href="#2-3-线性回归" class="headerlink" title="2.3 线性回归"></a>2.3 线性回归</h3><p><strong>线性回归是分析<font color = 'red'>一个</font>变量与另外一（多）个变量之间关系的方法</strong></p><blockquote><p>线性回归求解步骤：</p><ol><li>确定模型：Model：y = wx+b</li><li>选择损失函数： MSE: L1Loss,交叉熵损失</li><li>求解梯度并更新w,b w = w - LR* w.grad;b = b-LR*b.grad</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">lr = <span class="number">0.001</span> <span class="comment"># 设置学习率</span></span><br><span class="line"><span class="comment"># 创建训练数据</span></span><br><span class="line">x = torch.rand(<span class="number">20</span>,<span class="number">1</span>) * <span class="number">10</span> </span><br><span class="line">y = <span class="number">2</span>*x + (<span class="number">5</span> + torch.randn(<span class="number">20</span>,<span class="number">1</span>))</span><br><span class="line"><span class="comment"># 构建线性回归参数</span></span><br><span class="line">w = torch.randn((<span class="number">1</span>),requires_grad=<span class="literal">True</span>)</span><br><span class="line">b = torch.randn((<span class="number">1</span>),requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> iteration <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line"><span class="comment">#前向传播</span></span><br><span class="line">wx = torch.mul(w,x)</span><br><span class="line">y_pred = torch.add(wx,b)</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算loss</span></span><br><span class="line">loss=(<span class="number">0.5</span>*(y-y_pred)**<span class="number">2</span>).mean()</span><br><span class="line"></span><br><span class="line"><span class="comment">#反向传播</span></span><br><span class="line">loss.backward()</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新参数</span></span><br><span class="line">b.data.sub_(lr * b.grad)</span><br><span class="line">w.data.sub_(lr * w.grad)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line"><span class="keyword">if</span> iteration % <span class="number">20</span> == <span class="number">0</span>:</span><br><span class="line">plt.scatter(x.data.numpy(),y.data.numpy())</span><br><span class="line">plt.plot(x.data.numpy(),y_pred.data.numpy(),<span class="string">'r-'</span>,lw=<span class="number">5</span>)</span><br><span class="line">plt.text(<span class="number">2</span>,<span class="number">20</span>,<span class="string">'Loss=%.4f'</span>%loss.data.numpy(),fontdict=&#123;<span class="string">'size'</span>:<span class="number">20</span>,<span class="string">'color'</span>:<span class="string">'red'</span>&#125;)</span><br><span class="line">plt.xlim(<span class="number">1.5</span>,<span class="number">10</span>)</span><br><span class="line">plt.ylim(<span class="number">8</span>,<span class="number">28</span>)</span><br><span class="line">plt.title(<span class="string">"Iteration:&#123;&#125;\nw：&#123;&#125; b:&#123;&#125;"</span>.format(iteration,w.data.numpy(),b.data.numpy()))</span><br><span class="line">plt.pause(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> loss.data.numpy() &lt; <span class="number">1</span>:</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="3-计算图与动态图机制"><a href="#3-计算图与动态图机制" class="headerlink" title="3.计算图与动态图机制"></a>3.计算图与动态图机制</h2><h3 id="3-1-计算图"><a href="#3-1-计算图" class="headerlink" title="3.1 计算图"></a>3.1 计算图</h3><p>计算图是用来描述运算的有向无环图<br>计算图有两个主要元素：节点（Node)和边（Edge)<br>好处：计算简洁，求导方便<br>叶子节点：用户创建的节点称为叶子节点，是整个计算图的根基<br>retain_grad()保存非叶子节点的梯度</p><h3 id="3-2-动态图机制"><a href="#3-2-动态图机制" class="headerlink" title="3.2 动态图机制"></a>3.2 动态图机制</h3><p>根据计算图搭建方式，可将计算图分为动态图和静态图。<br>动态图：运算与搭建同时进行。pytorch、自由行；灵活、易调节<br>静态图：先搭建图，后运算。tensorflow、跟团旅行；高效、不灵活</p><h2 id="4-autograd与逻辑回归"><a href="#4-autograd与逻辑回归" class="headerlink" title="4.autograd与逻辑回归"></a>4.autograd与逻辑回归</h2><h3 id="4-1-autograd-自动求导系统"><a href="#4-1-autograd-自动求导系统" class="headerlink" title="4.1 autograd-自动求导系统"></a>4.1 autograd-自动求导系统</h3><ul><li><p>torch.autograd.backward<br>功能：自动求取梯度</p><blockquote><p>torch.autograd.backward(tensors,grad_tensors=None,retain_grad_None,create_graph=False)</p><ul><li>tensors: 用于求导的张量，如loss</li><li>retain_graph: 保存计算图</li><li>create_graph: 创建导数计算图，用于高阶计算</li><li>grad_tensors:多梯度权重</li></ul></blockquote></li><li><p>torch.autograd.grad()<br>功能：求取梯度</p><blockquote><p>torch.autograd.grad(outputs,inputs,grad_outputs=None,retain_grad=None,create_graph=False)</p><ul><li>outputs:用于求导的张量，如loss</li><li>inputs:需要梯度的张量</li><li>retain_graph: 保存计算图</li><li>create_graph: 创建导数计算图，用于高阶计算</li><li>grad_tensors:多梯度权重</li></ul></blockquote></li></ul><p><font color  = 'red'>1. 梯度不会自动清零，记得手动清零2. 所有依赖叶子节点的节点，requires_grad都为True3. 叶子节点不能执行in_place操作</font></p><h3 id="4-2-逻辑回归"><a href="#4-2-逻辑回归" class="headerlink" title="4.2 逻辑回归"></a>4.2 逻辑回归</h3><p>逻辑回归(对数几率回归)是线性的二分类模型。<br>线性回归是分析自变量X与因变量Y（标量）之间关系的方法；<br>逻辑回归是分析自变量X与因变量Y（概率）之间关系的方法。</p><blockquote><p>机器学习模型训练的步骤:</p><p>迭代训练：{<br>    - 数据：数据采集，清洗，预处理<br>    - 模型：根据任务复杂程度，选择不同的模型<br>    - 损失函数：根据任务而定<br>    - 优化器：求导，梯度优化<br>}</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">sample_nums = <span class="number">100</span></span><br><span class="line">mean_value = <span class="number">1.7</span></span><br><span class="line">bias =<span class="number">1</span></span><br><span class="line"><span class="comment"># 1.生成数据</span></span><br><span class="line">n_data = torch.ones(sample_nums,<span class="number">2</span>)</span><br><span class="line">x0 = torch.normal(mean_value * n_data,<span class="number">1</span>) + bias</span><br><span class="line">y0 = torch.zeros(sample_nums)</span><br><span class="line">x1 = torch.normal(-mean_value * n_data,<span class="number">1</span>) + bias</span><br><span class="line">y1 = torch.ones(sample_nums)</span><br><span class="line">train_x = torch.cat((x0,x1),<span class="number">0</span>)</span><br><span class="line">train_y = torch.cat((y0,y1),<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 选择模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LR</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">super(LR,self).__init__()</span><br><span class="line">self.features = nn.Linear(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">self.sigmoid = nn.Sigmoid()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self,x)</span>:</span></span><br><span class="line">x = self.features(x)</span><br><span class="line">x = self.sigmoid(x)</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">lr_net = LR()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.选择损失函数</span></span><br><span class="line">loss_fn = nn.BCELoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.选择优化器</span></span><br><span class="line">lr = <span class="number">0.01</span></span><br><span class="line">optimizer = torch.optim.SGD(lr_net.parameters(),lr=lr,momentum=<span class="number">0.9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.模型训练</span></span><br><span class="line"><span class="keyword">for</span> iteration <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line"><span class="comment">#前向传播</span></span><br><span class="line">y_pred = lr_net(train_x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算loss</span></span><br><span class="line">loss = loss_fn(y_pred.squeeze(),train_y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反向传播</span></span><br><span class="line">loss.backward()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新参数</span></span><br><span class="line">optimizer.step()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line"><span class="keyword">if</span> iteration % <span class="number">20</span>:</span><br><span class="line">mask = y_pred.ge(<span class="number">0.5</span>).float().squeeze() </span><br><span class="line">correct = (mask == train_y).sum()</span><br><span class="line">acc = correct.item() / train_y.size(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">plt.scatter(x0.data.numpy()[:,<span class="number">0</span>],x0.data.numpy()[:,<span class="number">1</span>],c=<span class="string">'r'</span>,label=<span class="string">'class 0'</span>)</span><br><span class="line">plt.scatter(x1.data.numpy()[:,<span class="number">0</span>],x1.data.numpy()[:,<span class="number">1</span>],c=<span class="string">'b'</span>,label=<span class="string">'class 1'</span>)</span><br><span class="line"></span><br><span class="line">w0,w1 = lr_net.features.weight[<span class="number">0</span>]</span><br><span class="line">w0,w1 = float(w0.item()),float(w1.item())</span><br><span class="line">plot_b = float(lr_net.features.bias[<span class="number">0</span>].item())</span><br><span class="line">plot_x = np.arange(<span class="number">-6</span>,<span class="number">6</span>,<span class="number">0.1</span>)</span><br><span class="line">plot_y = (-w0 * plot_x - plot_b) / w1</span><br><span class="line"></span><br><span class="line">plt.xlim(<span class="number">-5</span>,<span class="number">7</span>)</span><br><span class="line">plt.ylim(<span class="number">-7</span>,<span class="number">7</span>)</span><br><span class="line">plt.plot(plot_x,plot_y)</span><br><span class="line"></span><br><span class="line">plt.text(<span class="number">-5</span>,<span class="number">5</span>,<span class="string">'Loss=%.4f'</span>%loss.data.numpy(),fontdict=&#123;<span class="string">'size'</span>:<span class="number">20</span>,<span class="string">'color'</span>:<span class="string">'red'</span>&#125;)</span><br><span class="line">plt.title(<span class="string">"Iteration:&#123;&#125;\nw0:&#123;:.2f&#125; w1:&#123;:.2f&#125; accuracy:&#123;:.2%&#125;"</span>.format(iteration,w0,w1,plot_b,acc))</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line">        plt.pause(<span class="number">0.5</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> acc &gt; <span class="number">0.99</span>:</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Pytorch学习第一周&quot;&gt;&lt;a href=&quot;#Pytorch学习第一周&quot; class=&quot;headerlink&quot; title=&quot;Pytorch学习第一周&quot;&gt;&lt;/a&gt;Pytorch学习第一周&lt;/h1&gt;
    
    </summary>
    
    
      <category term="deeplearning" scheme="http://changsl231.xyz/categories/deeplearning/"/>
    
    
      <category term="pytorch" scheme="http://changsl231.xyz/tags/pytorch/"/>
    
      <category term="python" scheme="http://changsl231.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu jupyternotebook添加keanel被拒绝</title>
    <link href="http://changsl231.xyz/2020/07/29/jupyternotebook%E6%B7%BB%E5%8A%A0keanel%E8%A2%AB%E6%8B%92%E7%BB%9D/"/>
    <id>http://changsl231.xyz/2020/07/29/jupyternotebook%E6%B7%BB%E5%8A%A0keanel%E8%A2%AB%E6%8B%92%E7%BB%9D/</id>
    <published>2020-07-29T00:57:08.000Z</published>
    <updated>2020-07-29T01:21:50.222Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Errno-13-Permission-denied-’-usr-local-share-jupyter’"><a href="#Errno-13-Permission-denied-’-usr-local-share-jupyter’" class="headerlink" title="[Errno 13] Permission denied:’/usr/local/share/jupyter’"></a>[Errno 13] Permission denied:’/usr/local/share/jupyter’</h1><h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1.问题描述</h2><p>当我们使用conda创建虚拟环境后，keanel不会自动添加到jupyter notebook的keanel列表当中，这时候就需要我们通过命令手动添加，Windows下的操作命令如下：</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda activate mmd2 <span class="comment"># 激活环境</span></span><br><span class="line">conda install ipykernel <span class="comment"># 安装必要插件</span></span><br><span class="line">python -m ipykernel install --name mmd2</span><br></pre></td></tr></table></figure><p>但是相同的情况在Ubuntu环境下使用的话，会出现 <code>[Errno 13] Permission denied:&#39;/usr/local/share/jupyter</code>的错误，如图一所示：</p><p><img src="https://img-blog.csdnimg.cn/20200729091057104.png#pic_center" alt=""></p><center><font size = 3>图1 问题图片</font></center>## 2.问题解决在安装命令里添加`--usr`即可解决，命令如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m ipykernel install --usr --name mmd2</span><br></pre></td></tr></table></figure>结果图如下所示：<p><img src="https://img-blog.csdnimg.cn/2020072909115154.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Errno-13-Permission-denied-’-usr-local-share-jupyter’&quot;&gt;&lt;a href=&quot;#Errno-13-Permission-denied-’-usr-local-share-jupyter’&quot; class=&quot;headerlink&quot; title=&quot;[Errno 13] Permission denied:’/usr/local/share/jupyter’&quot;&gt;&lt;/a&gt;[Errno 13] Permission denied:’/usr/local/share/jupyter’&lt;/h1&gt;&lt;h2 id=&quot;1-问题描述&quot;&gt;&lt;a href=&quot;#1-问题描述&quot; class=&quot;headerlink&quot; title=&quot;1.问题描述&quot;&gt;&lt;/a&gt;1.问题描述&lt;/h2&gt;&lt;p&gt;当我们使用conda创建虚拟环境后，keanel不会自动添加到jupyter notebook的keanel列表当中，这时候就需要我们通过命令手动添加，Windows下的操作命令如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://changsl231.xyz/categories/python/"/>
    
    
      <category term="ubuntu" scheme="http://changsl231.xyz/tags/ubuntu/"/>
    
      <category term="jupyternotebook" scheme="http://changsl231.xyz/tags/jupyternotebook/"/>
    
  </entry>
  
  <entry>
    <title>修改json内容</title>
    <link href="http://changsl231.xyz/2020/07/28/json%E4%BF%AE%E6%94%B9%E5%86%85%E5%AE%B9/"/>
    <id>http://changsl231.xyz/2020/07/28/json%E4%BF%AE%E6%94%B9%E5%86%85%E5%AE%B9/</id>
    <published>2020-07-28T12:58:08.000Z</published>
    <updated>2020-07-28T23:34:10.606Z</updated>
    
    <content type="html"><![CDATA[<h1 id="修改json内容"><a href="#修改json内容" class="headerlink" title="修改json内容"></a>修改json内容</h1><h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h2><p>当时用labelme标注图片后，又对文件进行了重命名，发现<code>imagePath</code>和重命名的文件名不一致，这样在制作coco数据集时会出现报错的情况，因此需要对<code>imagePath</code>也进行更新。</p><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200728220942334.png#pic_center" alt=""></p><center> <font size = 3>图1. 问题图片.png</font></center><h2 id="2-程序操作"><a href="#2-程序操作" class="headerlink" title="2.程序操作"></a>2.程序操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入程序包</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment">#定位json所在的文件夹</span></span><br><span class="line">file_json=<span class="string">'D:\\LocalGithub\\mmdetection2.0\\data\\dataB\\coco\\test2014'</span> </span><br><span class="line"><span class="comment">#定义操作函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_json</span><span class="params">(path)</span>:</span></span><br><span class="line">    files=os.listdir(path)</span><br><span class="line">    <span class="comment">#os.listdir() 方法用于返回指定的文件夹包含的文件或文件夹的名字的列表</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files: </span><br><span class="line">        dir=os.path.join(path,file)</span><br><span class="line">        <span class="comment"># os.path.join()，将join()里面得参数拼接成一个完整得路径。</span></span><br><span class="line">        <span class="comment"># 检查是否为文件夹，如果是，则递归</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(dir):</span><br><span class="line">            chang_json(dir)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        file_split=file.split(<span class="string">'.'</span>)</span><br><span class="line">        <span class="comment">#file.split将file列表数据以"."分割，并赋值给file_split</span></span><br><span class="line">        <span class="keyword">if</span> file_split[<span class="number">-1</span>] == <span class="string">"json"</span>:</span><br><span class="line">            str=<span class="string">""</span>.join(file_split[<span class="number">0</span>])+<span class="string">".jpg"</span> <span class="comment"># 定义要更改的文件名</span></span><br><span class="line">            <span class="keyword">with</span> open(path+<span class="string">'\\'</span>+file,<span class="string">'rb'</span>) <span class="keyword">as</span> load_f: </span><br><span class="line">            <span class="comment">#定义为只读模式，并定义名称为f</span></span><br><span class="line">                params = json.load(load_f)</span><br><span class="line">                <span class="comment">#加载json文件中的内容给params</span></span><br><span class="line">                load_f.close() <span class="comment"># 关闭文件</span></span><br><span class="line">            <span class="keyword">with</span> open(path+<span class="string">'\\'</span>+file,<span class="string">'w'</span>) <span class="keyword">as</span> dump_f:</span><br><span class="line">            <span class="comment">#定义为写入模式，并定义名称为f</span></span><br><span class="line">                print(str) <span class="comment"># 查看要写入的名称</span></span><br><span class="line">                params[<span class="string">'imagePath'</span>] = str <span class="comment"># 更改参数</span></span><br><span class="line">                json.dump(params,dump_f) <span class="comment"># 将params写入文件</span></span><br><span class="line">                dump_f.close() <span class="comment">#关闭文件</span></span><br></pre></td></tr></table></figure><blockquote><p>到此文件就更新完成了，只不过原先json文件里有换行符，更新后没有了影响观看，但是不影响正常使用。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;修改json内容&quot;&gt;&lt;a href=&quot;#修改json内容&quot; class=&quot;headerlink&quot; title=&quot;修改json内容&quot;&gt;&lt;/a&gt;修改json内容&lt;/h1&gt;&lt;h2 id=&quot;1-问题描述&quot;&gt;&lt;a href=&quot;#1-问题描述&quot; class=&quot;headerlink&quot; title=&quot;1. 问题描述&quot;&gt;&lt;/a&gt;1. 问题描述&lt;/h2&gt;&lt;p&gt;当时用labelme标注图片后，又对文件进行了重命名，发现&lt;code&gt;imagePath&lt;/code&gt;和重命名的文件名不一致，这样在制作coco数据集时会出现报错的情况，因此需要对&lt;code&gt;imagePath&lt;/code&gt;也进行更新。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://changsl231.xyz/categories/python/"/>
    
    
      <category term="json" scheme="http://changsl231.xyz/tags/json/"/>
    
      <category term="io" scheme="http://changsl231.xyz/tags/io/"/>
    
      <category term="labelme" scheme="http://changsl231.xyz/tags/labelme/"/>
    
  </entry>
  
</feed>
